#version 310 es
layout (local_size_x = 1, local_size_y = 64) in;


layout (rgba8ui, binding = 0) uniform readonly highp uimage2D texFront;
layout (rgba8ui, binding = 1) uniform readonly highp uimage2D texBack;
layout (rgba8ui, binding = 2) uniform readonly highp uimage2D texLeft;
layout (rgba8ui, binding = 3) uniform readonly highp uimage2D texRight;

uniform uint overlapMax;
uniform uint stride;

layout (std430, binding = 4) readonly buffer overlap
{
    uint count[4];
    uvec2 coord[];
};

layout (std430, binding = 5) buffer ySum {
    uint sum[8];
};

vec3 YUVfromRGB(vec3 ColorRGB)
{
    float R = float(ColorRGB.r);
    float G = float(ColorRGB.g);
    float B = float(ColorRGB.b);
	float Y = 0.257 * R + 0.504 * G + 0.098 * B + 16.0;
	float U = -0.148 * R - 0.291 * G + 0.439 * B + 128.0;
	float V = 0.439 * R - 0.368 * G - 0.071 * B + 128.0;
    vec3 YUV = vec3(Y, U, V);
    return YUV;
}

void main() {
    uvec2 pos = uvec2(gl_GlobalInvocationID.xy);
    if (pos.y < count[pos.x & 0x3u]) {
        uvec2 xy = coord[pos.x * overlapMax + pos.y];
        uint value4Tuple = 0u;
        uvec4 color = imageLoad(texFront, ivec2(xy));
        vec3 YUV = vec3(0);
        switch (pos.x / 2u) {
        case 0u:
            color = imageLoad(texFront, ivec2(xy)); //to be modified
            break;
        case 1u:
            color = imageLoad(texBack, ivec2(xy));
            break;
        case 2u:
            color = imageLoad(texLeft, ivec2(xy));
            break;
        case 3u:
            color = imageLoad(texRight, ivec2(xy));
            break;
        }

        YUV = YUVfromRGB(vec3(color.xyz));
        value4Tuple = uint(YUV.x);
        uint r_i = uint(xy.x % 4u);
        uint value1 = (value4Tuple>> (r_i * 8u)) & 0xffu;

        atomicAdd(sum[pos.x], value1 );
    }
}